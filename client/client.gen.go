// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// InlineResponse200 defines model for inline_response_200.
type InlineResponse200 struct {
	City          *string `json:"city,omitempty"`
	CityGeonameId *int    `json:"city_geoname_id,omitempty"`
	Connection    *struct {
		AutonomousSystemNumber       *int    `json:"autonomous_system_number,omitempty"`
		AutonomousSystemOrganization *string `json:"autonomous_system_organization,omitempty"`
		ConnectionType               *string `json:"connection_type,omitempty"`
		IspName                      *string `json:"isp_name,omitempty"`
		OrganizationName             *string `json:"organization_name,omitempty"`
	} `json:"connection,omitempty"`
	Continent          *string `json:"continent,omitempty"`
	ContinentCode      *string `json:"continent_code,omitempty"`
	ContinentGeonameId *int    `json:"continent_geoname_id,omitempty"`
	Country            *string `json:"country,omitempty"`
	CountryCode        *string `json:"country_code,omitempty"`
	CountryGeonameId   *int    `json:"country_geoname_id,omitempty"`
	CountryIsEu        *bool   `json:"country_is_eu,omitempty"`
	Currency           *struct {
		CurrencyCode *string `json:"currency_code,omitempty"`
		CurrencyName *string `json:"currency_name,omitempty"`
	} `json:"currency,omitempty"`
	Flag *struct {
		Emoji   *string `json:"emoji,omitempty"`
		Png     *string `json:"png,omitempty"`
		Svg     *string `json:"svg,omitempty"`
		Unicode *string `json:"unicode,omitempty"`
	} `json:"flag,omitempty"`
	IpAddress       *string  `json:"ip_address,omitempty"`
	Latitude        *float32 `json:"latitude,omitempty"`
	Longitude       *float32 `json:"longitude,omitempty"`
	PostalCode      *string  `json:"postal_code,omitempty"`
	Region          *string  `json:"region,omitempty"`
	RegionGeonameId *int     `json:"region_geoname_id,omitempty"`
	RegionIsoCode   *string  `json:"region_iso_code,omitempty"`
	Security        *struct {
		IsVpn *bool `json:"is_vpn,omitempty"`
	} `json:"security,omitempty"`
	Timezone *struct {
		Abbreviation *string `json:"abbreviation,omitempty"`
		CurrentTime  *string `json:"current_time,omitempty"`
		GmtOffset    *int    `json:"gmt_offset,omitempty"`
		IsDst        *bool   `json:"is_dst,omitempty"`
		Name         *string `json:"name,omitempty"`
	} `json:"timezone,omitempty"`
}

// GetV1Params defines parameters for GetV1.
type GetV1Params struct {
	ApiKey    string  `form:"api_key" json:"api_key"`
	IpAddress *string `form:"ip_address,omitempty" json:"ip_address,omitempty"`
	Fields    *string `form:"fields,omitempty" json:"fields,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetV1 request
	GetV1(ctx context.Context, params *GetV1Params, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetV1(ctx context.Context, params *GetV1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetV1Request generates requests for GetV1
func NewGetV1Request(server string, params *GetV1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "api_key", runtime.ParamLocationQuery, params.ApiKey); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.IpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ip_address", runtime.ParamLocationQuery, *params.IpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetV1WithResponse request
	GetV1WithResponse(ctx context.Context, params *GetV1Params, reqEditors ...RequestEditorFn) (*GetV1Response, error)
}

type GetV1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InlineResponse200
}

// Status returns HTTPResponse.Status
func (r GetV1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetV1WithResponse request returning *GetV1Response
func (c *ClientWithResponses) GetV1WithResponse(ctx context.Context, params *GetV1Params, reqEditors ...RequestEditorFn) (*GetV1Response, error) {
	rsp, err := c.GetV1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1Response(rsp)
}

// ParseGetV1Response parses an HTTP response from a GetV1WithResponse call
func ParseGetV1Response(rsp *http.Response) (*GetV1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InlineResponse200
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
